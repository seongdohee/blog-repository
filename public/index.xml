<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dohee&#39;s blog</title>
    <link>http://seongdohee.github.io/</link>
    <description>Recent content on dohee&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>seong0420hei@gmail.com (dohee)</managingEditor>
    <webMaster>seong0420hei@gmail.com (dohee)</webMaster>
    <copyright>(c) 2015 seongdohee.github.io</copyright>
    <atom:link href="http://seongdohee.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>정규표현식</title>
      <link>http://seongdohee.github.io/1/01/01/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>seong0420hei@gmail.com (dohee)</author>
      <guid>http://seongdohee.github.io/1/01/01/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D/</guid>
      <description>&lt;p&gt;&lt;code&gt;정규표현식(reqular expression)&lt;/code&gt;이란 문자들의 패턴을 표현하는 형식을 말한다.
문자열 처리에 있어서 정규표현5식을 사용하지 않아도 대부분 해결할 수 있지만, 필요 이상으로 코드가 길어지게 된다.
정규표현식을 이용하면 매우 간단하게 해결할 수 있다. (간단하게 사용할수 없다는게 함정..)&lt;/p&gt;

&lt;p&gt;예로, 숫자 천단위마다 콤마를 찍어서 치환하는 경우를 코딩해보았다.
&lt;pre&gt;
&lt;code class=&#34;javascript&#34;&gt;
function groupByCommas(n) {
    var str = n.toString();
    var result = [];
    for(var i = str.length-1, count = 1; i&amp;gt;=0;i&amp;ndash;,count++) {
        result.push(str[i]);
        if(i != 0 &amp;amp;&amp;amp; count%3 == 0) result.push(&amp;lsquo;,&amp;rsquo;);
    }
    return result.reverse().join(&amp;ldquo;);
}
&lt;/code&gt;
&lt;/pre&gt;
ß
천단위 콤마를 찍기 위해서 수행된 행동은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;천 단위로 숫자를 잘라서 배열로 만든다.&lt;/li&gt;
&lt;li&gt;배열 사이에 &amp;lsquo;,&amp;lsquo;를 삽입한다.&lt;/li&gt;
&lt;li&gt;배열을 다시 문자열로 치환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;정규 표현식을 이용하면 어떻게 될까?
&lt;pre&gt;
&lt;code class=&#34;javascript&#34;&gt;
function groupByCommas(n) {
    return n.toString().replace(/(\d)(?=(?:\d\d\d)+(?!\d))/g, &amp;lsquo;$1,&amp;rsquo;);
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;코드가 한결 간결해졌을 뿐만 아니라 디버깅도 쉬워졌다.
처음 코드의 경우 디버깅 포인트가 3가지나 있지만 아래 코드는 표현식 부분만 확인해주면 되기 때문이다.&lt;/p&gt;

&lt;p&gt;그렇다면 정규표현식은 어떻게 쓸 수 있을까? 언뜻보기엔 쉬워보이지만 표현하고자 하는 문자열의 패턴이 복잡할수록 정규표현식도 복잡해진다.
또, 하나의 문자열 패턴에서 수가지의 표현식이 나올 수 있기때문에 효율적으로 사용하려면 먼저 탄탄히 기본기를 잡는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Anchors&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;표현식&lt;/th&gt;
&lt;th&gt;예시&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;^a&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^a&lt;/code&gt; =&amp;gt; &lt;code&gt;a&lt;/code&gt;bcdef (O), bacdef (X)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;a$&lt;/td&gt;
&lt;td&gt;a로 끝나는 문자열&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;\ba&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>